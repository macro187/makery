
--------------------------------------------------------------------------------
    Introduction
--------------------------------------------------------------------------------

    Makery is a build system that is:

    -   Lightweight.  Requires only a shell, GNU Make, and standard
        command-line tools.

    -   Modular.  Build functionality is implemented in modules, which can
        depend on one another.

    -   Multi-project.  Can build multiple projects with inter-project
        dependencies in a single invocation.


    Think of Makery as solutions/projects from IDEs like Visual Studio or
    Eclipse, but with more convention-over-configuration.



--------------------------------------------------------------------------------
    Development Status
--------------------------------------------------------------------------------

    Makery is in an alpha state.  It is fully-functional but subject to
    frequent change.


    Open tasks:

    -   Optimise, especially on Windows where process forking is really slow

    -   User guide / documentation

    -   More modules for building more stuff



--------------------------------------------------------------------------------
    Quick Start
--------------------------------------------------------------------------------

    -   Get Makery:

            $ git clone https://github.com/macro187/makery.git


    -   Declare where you put it:

            $ export MAKERY=/path/to/makery



--------------------------------------------------------------------------------
    Microsoft Windows
--------------------------------------------------------------------------------

    Makery has first-class support for Microsoft Windows, despite being
    implemented in Make and sh which are associated with unix-like systems.


    To run Makery on Windows, there are two options:

    -   Cygwin.  A complete unix-like environment.  Works just like any
        other unix-like operating system, so nothing special required.


    -   MSYS.  A minimal unix-like environment, and the more
        "Windows-native" option.

        An easy way to get a Makery-capable MSYS environment is to
        install Git for Windows and use its "Git Bash".

        The only additional requirement is GNU Make, which can be
        downloaded from

            http://sourceforge.net/projects/mingw/files/MSYS/Base/

        Download Make plus its required libraries, which (at present)
        means

        -   make/make-<latest>/make-<latest>-msys-<latest>-bin.tar.lzma

        -   gettext/gettext-<latest>/libintl-<latest>-dll-<x>.tar.lzma

        -   libiconv/libiconv-<latest>/libiconv-<latest>-dll-<x>.tar.lzma

        Extract the contents into %USERPROFILE%\bin\.



--------------------------------------------------------------------------------
    Operating System Support
--------------------------------------------------------------------------------

    Systems with

    -   A Bash shell (or similar)

    -   Standard command-line tools

    -   A recent version of GNU Make


    Definitely

    -   Microsoft Windows (Cygwin)

    -   Microsoft Windows (MSYS)

    -   FreeBSD


    Probably

    -   Most (if not all) Linux distros

    -   Most (it not all) BSDs

    -   Mac OSX



--------------------------------------------------------------------------------
    .NET Support
--------------------------------------------------------------------------------

    Frameworks

    -   Microsoft .NET

    -   Mono


    Dotnet Generations

    -   1.0 through 4.0


    Project Types

    -   Libraries

    -   Console applications

    -   ASP.NET


    Documentation

    -   Doxygen


    Languages

    -   C#


    Localised Embedded Resources

    -   Using Resbian tool from Halfdecent Sharp
        (http://github.com/macro187/halfdecentsharp)



--------------------------------------------------------------------------------
    Projects
--------------------------------------------------------------------------------

    Projects are the logical units that Makery builds.  Generally, projects
    consist of a Makefile plus source materials for building one or more
    closely-related artifact(s) such as an executable, a library, or a
    website.  If you've used an IDE such as Visual Studio or Eclipse, you
    know what a project is.

    Projects can depend on other projects.  Projects declare their direct
    dependencies, and Makery figures out the rest.

    Projects live in subdirectories whose names double as unique project
    names.  Required projects are searched for by name under any paths
    specified in the colon-separated MAKERYPATH environment variable.

    Regardless of the number of projects involved in a build, Makery uses a
    single Make invocation.  It does not run Make recursively.  See
    http://miller.emu.id.au/pmiller/books/rmch/ for a discussion of this
    issue.



--------------------------------------------------------------------------------
    Modules
--------------------------------------------------------------------------------

    A module is a single piece of Makery build functionality.  Examples of
    the types of things modules might do:

    -   Locate source code files

    -   Create rules that perform preprocessing on source code files

    -   Locate compilers and create rules that use them to compile
        source code files

    -   Locate linkers and create rules that use them to link object
        files into programs or libraries

    -   Locate document processing programs and create rules that use
        them to generate documents from source markup

    -   Make projects executable in-place by assembling required
        artifacts from other projects

    -   Package artifacts from multiple projects into distribution
        archives

    Modules can declare direct dependencies on other modules, and Makery
    figures out the rest.

    Modules are just projects named according to the pattern
    makery-<modulename>, so they are located and distributed the same way.



--------------------------------------------------------------------------------
    Acknowledgements
--------------------------------------------------------------------------------

    Requires GNU Make from the GNU Project
    (http://www.gnu.org/software/make/)

    Includes and uses the GNU Make Standard Library from John Graham-Cumming
    (http://gmsl.sourceforge.net/)



--------------------------------------------------------------------------------
    Licence
--------------------------------------------------------------------------------

    Copyright (c) Ron MacNeil <macro@hotmail.com>

    Permission to use, copy, modify, and distribute this software for any
    purpose with or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


