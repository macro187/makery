
--------------------------------------------------------------------------------
    Introduction
--------------------------------------------------------------------------------

    TODO


--------------------------------------------------------------------------------
    Requirements
--------------------------------------------------------------------------------

    Any UNIX-like system with a Bourne shell and GNU Make, including
    Microsoft Windows via Cygwin, MSYS, or SFU.


    Well-tested platforms include:

    -   Gentoo Linux

    -   Cygwin on Windows XP

    -   MSYS on Windows XP

    -   SFU on Windows XP


    Also known to work on:

    -   Ubuntu Linux

    -   Fedora Linux

    -   FreeBSD

    -   Mac OSX


--------------------------------------------------------------------------------
    Support
--------------------------------------------------------------------------------

    .NET

    -   Libraries, console applications, and Doxygen documentation

    -   Microsoft .NET, Mono, GNU Portable.NET

    -   .NET generations 1.0 through 4.0

    -   C# and C (Portable.NET only)

    -   Localised resource compilation and embedding using Resbian resource
        tool from Halfdecent Sharp
        (http://github.com/macro187/halfdecentsharp)

    -   Mono support tested on Linux and FreeBSD

    -   Microsoft .NET support tested on Windows XP under Cygwin, MSYS, and
        SFU


--------------------------------------------------------------------------------
    Modules
--------------------------------------------------------------------------------

    Modules group related build functionality into self-contained, reusable,
    redistributable packages.  For example, different modules might contain
    functionality to:

    -   Locate source code files

    -   Create rules that perform preprocessing on source code files

    -   Locate compilers and create rules that use them to compile source
        code files

    -   Locate linkers and create rules that use them to link object files
        into programs or libraries

    -   Locate document processing programs and create rules that use them
        to generate documents from source markup

    -   Make projects executable in-place by assembling required artifacts
        from other projects

    -   Package artifacts from multiple projects into distribution archives


    Modules may depend on functionality from other modules.  Each module
    declares its direct requirements, and Makery recursively resolves
    dependencies and sources the required modules.


--------------------------------------------------------------------------------
    Projects
--------------------------------------------------------------------------------

    Projects are the logical units that one builds with Makery.  Generally,
    a project consists of a Makefile plus source materials for building one
    or more closely-related output artifacts such as an executable or a
    library.

    Because Makery is designed to be extended through its module system to
    build all kinds of different artifacts, the exact definition of a
    project varies.  Typical examples of kinds of projects might include:

    -   A docbook book

    -   A .NET library written in C#

    -   A program written in C

    -   A suite of related C# programs, each implemented in its own project,
        distributed together as a package


    Often, projects depend on other projects.  For example, a program may
    require one or more libraries.  Those libraries may themselves require
    other libraries, and so on.  Projects declare their direct requirements,
    and Makery includes a mechanism that recursively resolves dependencies
    and sources all required projects.


--------------------------------------------------------------------------------
    Configs
--------------------------------------------------------------------------------

    A given project can take on slightly different flavours depending on
    build options or conditions under which the build occurs.  Each project
    can be thought of as having multiple instances, one for each unique
    configuration.


    Makery provides a framework for defining different config fields,
    available options for each, masks for currently-unavailable options,
    etc.  At build time, default options are computed for each field,
    resulting in a default config, which is used for the build.  These
    default options can then be overridden on the build command line where
    desired.


    Examples of config fields include:

    -   Target operating system

    -   Target processor architecture

    -   Brand of compiler

    -   Whether debug code, symbols, etc. are present


--------------------------------------------------------------------------------
    More Information
--------------------------------------------------------------------------------

    README.INSTALL explains how to install Makery and Makery Packages on
    your system.

    README.GNUMAKE is a quick review of how GNU Make works.

    README.HACKING which explains how Makery works and how to hack on it.


--------------------------------------------------------------------------------
    Acknowledgements
--------------------------------------------------------------------------------

    Requires GNU Make from the GNU Project
    (http://www.gnu.org/software/make/)

    Includes and uses the GNU Make Standard Library from John Graham-Cumming
    (http://gmsl.sourceforge.net/)


--------------------------------------------------------------------------------
    Licence
--------------------------------------------------------------------------------

    Copyright (c) 2007, 2008, 2009, 2010, 2011, 2012
    Ron MacNeil <macro@hotmail.com>

    Permission to use, copy, modify, and distribute this software for any
    purpose with or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


