

    README.DOTNET

    The dotnet Makery modules


--------------------------------------------------------------------------------


    Copyright (c) 2007 Ron MacNeil
    <macro187 AT users DOT sourceforge DOT net>

    Permission to use, copy, modify, and distribute this software for any
    purpose with or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
    Copyright (c) 2007 Ron MacNeil


--------------------------------------------------------------------------------


x.  Introduction

    These Makery modules provide support for building .NET-related things.


x.  Modules

    x.  dotnet

    Represents creation of a .dll library or .exe program from some source
    code files.  Because you can program .NET in different languages, this
    module captures the lowest common subset.  You are required to
    MODULES_use an appropriate language-specific module in addition to
    dotnet.  Also note that because .NET compilers are responsible for
    compiling AND linking, the dotnet module doesn't provide any rules
    itself - the entire task of compiling and linking is left to the
    language-specific module to implement.


    x.  dotnet.c

    Language-specific module for compiling C to dotnet using Portable.NET's
    "cscc".


    x.  dotnet.copylibs

    Pulls a projects' binaries plus those of all required library projects
    into one place.  If the project is an .exe, this enables it be run
    in-place.


    x.  dotnet.csharp

    Language-specific module for compiling C#.  Supports Microsoft's "csc",
    Mono's "mcs", and Portable.NET's "cscc".


    x.  dotnet.exe.project

    Meta module that pulls together everything you usually want for a
    dotnet .exe program.  You must still additionally specify a
    language-specific module appropriate for the language your program is
    written in.


    x.  dotnet.lib.project

    Meta module that pulls together everything you usually want for a
    dotnet .dll library.  You must still additionally specify a
    language-specific module appropriate for the language your library is
    written in.


    x.  dotnet.resbian

    Support for compiling various kind of files into .resources files using
    the "Resbian" tool.  Also arranges for those .resources files to be
    linked into the final output binary.

    The Resbian tool is available as part of the "halfdecentsharp" tools
    and libraries at:

        http://sourceforge.net/projects/halfdecentsharp/

    [TODO Support for satellite assemblies?]

    The localization classes in the .NET class library expect resources to
    be broken up by culture and by the .NET type they apply to, which means
    a separate .resources file embedded per culture/type combination.  In
    addition, the resource items themselves can be of different types (eg.
    strings, images, etc.).  The dotnet.resbian module can handle all this
    for you automatically by way of a subdirectory and filename convention
    for your resource source files:

    x.  All resource source files should be located under a subdirectory in
        the project. (the res/ subdirectory is assumed by default)

    x.  Files directly under that top-level resource directory apply to the
        so-called "neutral culture".  Generally, the framework uses these
        when no culture-specific version exists.

    x.  Further subdirectories are named according to culture code and
        contain resource source files for each specific culture.

    x.  The resource source files themselves adhere to the following overall
        naming pattern:

            [<Namespace>.][<SubNamespace>.]<TypeName>__<filename>

        x.  If your assembly contains types in completely different
            namespaces, you can set your project's namespace to a
            blank string and include full namespaces here.
            Otherwise, your project's namespace (which is, by
            default, the same as your project's directory name) is
            prepended for you, so you should not include it here.

        x.  Specify <SubNamespace> if the type the resource applies
            to is in a sub-namespace of the project-wide namespace
            (which is the same as your project's directory name
            unless you've overridden it in your Makefile)

        x.  <TypeName> is the name of the .NET type within your project that
            the resource applies to

        x.  <filename> will depend on what type of resource(s) the file
            contains.  <filename> patterns currently supported by the
            Resbian tool are:

            x.  <name>.string.txt - The entire contents of the file will
                be a single string resource named <name>.

            x.  strings.txt - A text file containing multiple key/string
                pairs, each of which becomes a single string resource named
                the same as the key, plus a double-underscore "__" prefix.
                For libraries of localizable strings.

    Refer to the "examples/CSharp Test Lib" project for an illustrative
    example.


    x.  dotnet.runnable

    Hooks an .exe-producing dotnet project to the generic "runnable" target,
    allowing it to be run in a generic fashion with the "run" target or the
    RUNNABLE_run shell command.  Arranges for the program to be run using
    "mono" or "ilrun" if appropriate.

